import argparse

from vtxmpasmeshes.mesh_generator import variable_resolution_latlonmap
from vtxmpasmeshes.mpas_plots import view_resolution_map


parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument(
    "-g", "--grid", type=str, default='doughnut',
    help="""
        Grid option: \n 
        "  doughnut": 
                 <High resolution> area of a certain radius <size>. 
                 Linear increase of resolution to a certain <low
                 resolution> value after <margin>km. 
                 Keep the constant low resolution value for a while
                 (10*low_resolution)km and then increase it linearly
                 again until reaching 100km (to save space).
                 The requested MPAS region should be circular and 
                 have a radius of <size>+<margin>. The buffer 
                 generated by the MPAS-Limited-Area code will then
                 consist of a few "rings" of <lowresolution> cells.
                 \n
        """
)

parser.add_argument(
    "-highr", "--highresolution", required=True, type=float,
    help="Highest-resolution of grid (km).",
)

parser.add_argument(
    "-lowr", "--lowresolution", default=None, type=float,
    help="Lowest-resolution of grid (km).",
)

parser.add_argument(
    "-size", "--size", default=None, type=float,
    help="Radius of the highest-resolution area of the grid (km).",
)

parser.add_argument(
    "-margin", "--margin", default=None, type=float,
    help="Size of the variable resolution boundary around the "
         "high resolution area (km).",
)

parser.add_argument(
    "-lat", "--lat_ref", default=0., type=float,
    help="Central latitude.",
)

parser.add_argument(
    "-lon", "--lon_ref", default=0., type=float,
    help="Central longitude.",
)

# -p generates plots
parser.add_argument(
    "-p", "--withplots", action="store_true",
    help="generate plots to view the resolution.",
)

parser.add_argument(
    "-pdf", "--pdfname", default=None, type=str,
    help="pdffile where to save the resolution plots.",
)

args = parser.parse_args()

ds = variable_resolution_latlonmap(args.grid,
                                   highresolution=args.highresolution,
                                   lowresolution=args.lowresolution,
                                   size=args.size,
                                   margin=args.margin,
                                   lat_ref=args.lat_ref,
                                   lon_ref=args.lon_ref,
                                   )

print(ds)

if args.withplots or args.pdfname is not None:
    print('Plotting')
    view_resolution_map(ds, pdfname=args.pdfname,
                        list_distances=[1000, 500,
                                        ds.attrs['border'],
                                        ds.attrs['radius'],
                                        ])

